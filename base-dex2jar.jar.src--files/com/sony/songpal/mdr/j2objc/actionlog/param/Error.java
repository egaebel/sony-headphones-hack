package com.sony.songpal.mdr.j2objc.actionlog.param;

import com.sony.songpal.ble.client.GattError;

public enum Error {
  ASSIGNABLE_KEY_LEFT_NOT_SET,
  ASSIGNABLE_KEY_RIGHT_NOT_SET,
  BLE_CONNECTION_ERROR_133,
  BLE_CONNECTION_ILLEGAL_STATE,
  BLE_CONNECTION_TIMEOUT,
  BLE_GET_FRIENDLY_NAME_FAILED,
  BLE_INQUIRY_SCAN_FAILED,
  BLE_NOT_SUPPORTED,
  BLE_PAIRING_SEQUENCE_ERROR,
  BLE_PROTOCOL_UUID_UNMATCHED,
  BLE_SERVICE_NOT_FOUND,
  BLE_UNAVAILABLE,
  BLE_UNKNOWN_ERROR,
  BT_CONNECTION_TIMEOUT,
  BT_PROTOCOL_APP_LAYER_INVALID_PAYLOAD_ERROR,
  BT_PROTOCOL_DATA_LINK_LAYER_CHECKSUM_ERROR,
  BT_PROTOCOL_DATA_LINK_LAYER_DATA_TYPE_ERROR,
  BT_PROTOCOL_DATA_LINK_LAYER_PAYLOAD_LENGTH_ERROR,
  BT_PROTOCOL_DATA_LINK_LAYER_RETRY_COUNT_MAX_ERROR,
  BT_PROTOCOL_DATA_LINK_LAYER_SEQ_NO_ERROR,
  BT_PROTOCOL_DATA_LINK_LAYER_UNESCAPE_ERROR,
  BT_PROTOCOL_MSG_SEQUENCE_GETRET_RESPONSE_ERROR,
  BT_PROTOCOL_UUID_UNAVAILABLE,
  BT_PROTOCOL_VERSION_UNMATCHED,
  BT_UNAVAILABLE,
  EAP_ALREADY_CONNECTED,
  EAP_RESULT_CANCELLED,
  EAP_RESULT_FAILED,
  EAP_RESULT_NOT_FOUND,
  OTHER,
  PAIRING_BONDING_FAILED,
  PAIRING_REQUEST_FAILED,
  PAIRING_TIMEOUT,
  UNKNOWN("unknown");
  
  private final String mStrValue;
  
  static {
    OTHER = new Error("OTHER", 1, "other");
    BT_UNAVAILABLE = new Error("BT_UNAVAILABLE", 2, "btUnavailable");
    BT_CONNECTION_TIMEOUT = new Error("BT_CONNECTION_TIMEOUT", 3, "btConnectionTimeout");
    BT_PROTOCOL_UUID_UNAVAILABLE = new Error("BT_PROTOCOL_UUID_UNAVAILABLE", 4, "btProtocolUuidUnavailable");
    BT_PROTOCOL_VERSION_UNMATCHED = new Error("BT_PROTOCOL_VERSION_UNMATCHED", 5, "btProtocolVersionUnmatched");
    BT_PROTOCOL_DATA_LINK_LAYER_UNESCAPE_ERROR = new Error("BT_PROTOCOL_DATA_LINK_LAYER_UNESCAPE_ERROR", 6, "btProtocolDataLinkLayerUnescapeError");
    BT_PROTOCOL_DATA_LINK_LAYER_SEQ_NO_ERROR = new Error("BT_PROTOCOL_DATA_LINK_LAYER_SEQ_NO_ERROR", 7, "btProtocolDataLinkLayerSeqNoError");
    BT_PROTOCOL_DATA_LINK_LAYER_CHECKSUM_ERROR = new Error("BT_PROTOCOL_DATA_LINK_LAYER_CHECKSUM_ERROR", 8, "btProtocolDataLinkLayerChecksumError");
    BT_PROTOCOL_DATA_LINK_LAYER_PAYLOAD_LENGTH_ERROR = new Error("BT_PROTOCOL_DATA_LINK_LAYER_PAYLOAD_LENGTH_ERROR", 9, "btProtocolDataLinkLayerPayloadLengthError");
    BT_PROTOCOL_DATA_LINK_LAYER_DATA_TYPE_ERROR = new Error("BT_PROTOCOL_DATA_LINK_LAYER_DATA_TYPE_ERROR", 10, "btProtocolDataLinkLayerDataTypeError");
    BT_PROTOCOL_DATA_LINK_LAYER_RETRY_COUNT_MAX_ERROR = new Error("BT_PROTOCOL_DATA_LINK_LAYER_RETRY_COUNT_MAX_ERROR", 11, "btProtocolDataLinkLayerRetryCountMaxError");
    BT_PROTOCOL_APP_LAYER_INVALID_PAYLOAD_ERROR = new Error("BT_PROTOCOL_APP_LAYER_INVALID_PAYLOAD_ERROR", 12, "btProtocolAppLayerInvalidPayloadError");
    BT_PROTOCOL_MSG_SEQUENCE_GETRET_RESPONSE_ERROR = new Error("BT_PROTOCOL_MSG_SEQUENCE_GETRET_RESPONSE_ERROR", 13, "btProtocolMsgSequenceGetRetResponseError");
    BLE_UNAVAILABLE = new Error("BLE_UNAVAILABLE", 14, "bleUnavailable");
    BLE_CONNECTION_TIMEOUT = new Error("BLE_CONNECTION_TIMEOUT", 15, "bleConnectionTimeout");
    BLE_PROTOCOL_UUID_UNMATCHED = new Error("BLE_PROTOCOL_UUID_UNMATCHED", 16, "bleProtocolUuidUnmatched");
    BLE_CONNECTION_ERROR_133 = new Error("BLE_CONNECTION_ERROR_133", 17, "bleConnectionError133");
    BLE_NOT_SUPPORTED = new Error("BLE_NOT_SUPPORTED", 18, "bleNotSupported");
    BLE_CONNECTION_ILLEGAL_STATE = new Error("BLE_CONNECTION_ILLEGAL_STATE", 19, "bleConnectionIllegalState");
    BLE_SERVICE_NOT_FOUND = new Error("BLE_SERVICE_NOT_FOUND", 20, "bleServiceNotFound");
    BLE_UNKNOWN_ERROR = new Error("BLE_UNKNOWN_ERROR", 21, "bleUnknownError");
    BLE_INQUIRY_SCAN_FAILED = new Error("BLE_INQUIRY_SCAN_FAILED", 22, "bleInquiryScanFailed");
    BLE_GET_FRIENDLY_NAME_FAILED = new Error("BLE_GET_FRIENDLY_NAME_FAILED", 23, "bleGetFriendlyNameFailed");
    BLE_PAIRING_SEQUENCE_ERROR = new Error("BLE_PAIRING_SEQUENCE_ERROR", 24, "blePairingSequenceError ");
    PAIRING_REQUEST_FAILED = new Error("PAIRING_REQUEST_FAILED", 25, "pairingRequestFailed");
    PAIRING_BONDING_FAILED = new Error("PAIRING_BONDING_FAILED", 26, "pairingBondingFailed");
    PAIRING_TIMEOUT = new Error("PAIRING_TIMEOUT", 27, "pairingTimeout");
    EAP_ALREADY_CONNECTED = new Error("EAP_ALREADY_CONNECTED", 28, "eapAlreadyConnected");
    EAP_RESULT_NOT_FOUND = new Error("EAP_RESULT_NOT_FOUND", 29, "eapResultNotFound");
    EAP_RESULT_CANCELLED = new Error("EAP_RESULT_CANCELLED", 30, "eapResultCancelled");
    EAP_RESULT_FAILED = new Error("EAP_RESULT_FAILED", 31, "eapResultFailed");
    ASSIGNABLE_KEY_LEFT_NOT_SET = new Error("ASSIGNABLE_KEY_LEFT_NOT_SET", 32, "assignableKeyLeftNotSet");
    ASSIGNABLE_KEY_RIGHT_NOT_SET = new Error("ASSIGNABLE_KEY_RIGHT_NOT_SET", 33, "assignableKeyRightNotSet");
    a = new Error[] { 
        UNKNOWN, OTHER, BT_UNAVAILABLE, BT_CONNECTION_TIMEOUT, BT_PROTOCOL_UUID_UNAVAILABLE, BT_PROTOCOL_VERSION_UNMATCHED, BT_PROTOCOL_DATA_LINK_LAYER_UNESCAPE_ERROR, BT_PROTOCOL_DATA_LINK_LAYER_SEQ_NO_ERROR, BT_PROTOCOL_DATA_LINK_LAYER_CHECKSUM_ERROR, BT_PROTOCOL_DATA_LINK_LAYER_PAYLOAD_LENGTH_ERROR, 
        BT_PROTOCOL_DATA_LINK_LAYER_DATA_TYPE_ERROR, BT_PROTOCOL_DATA_LINK_LAYER_RETRY_COUNT_MAX_ERROR, BT_PROTOCOL_APP_LAYER_INVALID_PAYLOAD_ERROR, BT_PROTOCOL_MSG_SEQUENCE_GETRET_RESPONSE_ERROR, BLE_UNAVAILABLE, BLE_CONNECTION_TIMEOUT, BLE_PROTOCOL_UUID_UNMATCHED, BLE_CONNECTION_ERROR_133, BLE_NOT_SUPPORTED, BLE_CONNECTION_ILLEGAL_STATE, 
        BLE_SERVICE_NOT_FOUND, BLE_UNKNOWN_ERROR, BLE_INQUIRY_SCAN_FAILED, BLE_GET_FRIENDLY_NAME_FAILED, BLE_PAIRING_SEQUENCE_ERROR, PAIRING_REQUEST_FAILED, PAIRING_BONDING_FAILED, PAIRING_TIMEOUT, EAP_ALREADY_CONNECTED, EAP_RESULT_NOT_FOUND, 
        EAP_RESULT_CANCELLED, EAP_RESULT_FAILED, ASSIGNABLE_KEY_LEFT_NOT_SET, ASSIGNABLE_KEY_RIGHT_NOT_SET };
  }
  
  Error(String paramString1) {
    this.mStrValue = paramString1;
  }
  
  public static Error fromGattError(GattError paramGattError) {
    switch (null.a[paramGattError.ordinal()]) {
      default:
        return UNKNOWN;
      case 8:
        return BLE_UNKNOWN_ERROR;
      case 7:
        return BLE_SERVICE_NOT_FOUND;
      case 6:
        return BLE_CONNECTION_ILLEGAL_STATE;
      case 5:
        return BLE_NOT_SUPPORTED;
      case 4:
        return BLE_CONNECTION_ERROR_133;
      case 3:
        return BLE_PROTOCOL_UUID_UNMATCHED;
      case 2:
        return BLE_CONNECTION_TIMEOUT;
      case 1:
        break;
    } 
    return BLE_UNAVAILABLE;
  }
  
  public String getStrValue() {
    return this.mStrValue;
  }
}


/* Location:              /home/egaebel/Programs/sony-headphones-hack/base-dex2jar.jar!/com/sony/songpal/mdr/j2objc/actionlog/param/Error.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       1.1.3
 */